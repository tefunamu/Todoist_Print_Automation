# Read the text file generated by the Node.js script with proper encoding
Write-Host "Starting print script..."
$Text = Get-Content './tasks.txt' -Encoding UTF8 | Out-String
Write-Host "Text content loaded: $($Text.Length) characters"

Write-Host "Creating Word application..."
$Word = New-Object -ComObject "Word.Application"

# This keeps Microsoft Word invisible while it is open
$Word.Visible = $False
Write-Host "Word application created successfully"

# Create a new Word document with specific template
$Document = $Word.Documents.Add()
Write-Host "Word document created"

# Set document properties to avoid margin errors
$Document.PageSetup.Orientation = 0  # Portrait orientation (0 = Portrait, 1 = Landscape)
$Document.PageSetup.FirstPageTray = 0
$Document.PageSetup.OtherPagesTray = 0

# Create a range at the end of the Word document
$Range = $Document.Content

# Insert the text from the .txt file into the Word document with proper encoding
$Range.Text = $Text
Write-Host "Text inserted into document"

# Set basic formatting for receipt printer (no custom font to avoid encoding issues)
$Range.Font.Size = 8  # Smaller font size
$Range.ParagraphFormat.LineSpacing = 10  # Tighter line spacing
$Range.ParagraphFormat.SpaceAfter = 0    # No space after paragraphs
$Range.ParagraphFormat.LeftIndent = 0    # No left indent
$Range.ParagraphFormat.FirstLineIndent = 0  # No first line indent
Write-Host "Basic formatting configured"

# Access the PageSetup object to adjust margins (1 inch = 72 points)
$PageSetup = $Document.PageSetup

# Set margins for 80mm receipt printer (optimized for roll paper)
# $PageSetup.LeftMargin = 0     # 0mm left margin - start from left edge
# $PageSetup.RightMargin = 8.5  # 3mm right margin (3 * 2.835)
# $PageSetup.TopMargin = 70     # 25mm top margin (25 * 2.835) - increased to avoid cutoff
# $PageSetup.BottomMargin = 37  # 13mm bottom margin (13 * 2.835)

# Set paper size for 80mm receipt printer (roll paper)
# $PageSetup.PageWidth = 226.8  # 80mm width in points (80 * 2.835)
# $PageSetup.PageHeight = 567   # 200mm height in points (200 * 2.835)

Write-Host "Page setup configured for receipt printer"

# Save the document with proper encoding
$Document.SaveAs('tasks.docx', 16)  # 16 = wdFormatDocumentDefault with encoding
Write-Host "Document saved with encoding"

# This will send the word document for printing to the default printer
Write-Host "Attempting to print..."
$Document.PrintOut()
Write-Host "Print command sent"

$printerName = (Get-WmiObject -Class Win32_Printer | Where-Object { $_.Default -eq $true }).Name
Write-Host "Default printer: $printerName"

do {
    Start-Sleep -Seconds 1
    $jobs = Get-PrintJob -PrinterName $printerName
    Write-Host "Print jobs in queue: $($jobs.Count)"
} while ($jobs.Count -gt 0)

Write-Host "Print jobs completed"

# This command appears to be necessary in order to prevent some strange errors
Start-Sleep -Seconds 20

$Document.Close()
$Word.Quit([ref]$false)
Write-Host "Word application closed"

# Release COM objects
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Document) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Word) | Out-Null
Write-Host "Print script completed"
